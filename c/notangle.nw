% -*- mode: Noweb; noweb-code-mode: c-mode; c-indent-level: 4 -*-
% Copyright 1991 by Norman Ramsey.  All rights reserved.
% See file COPYRIGHT for more information.
@ 
\subsection{Tangling a single file}
A cheap imitation of tangle.
The idea is a very cheap implementation of tangle.
The markup of the file is described in file markup.ow.
@
The structure of the program is as follows: first we accumulate all of
the module definitions, then we write out the definition of the
root module (normally [["*"]]).
The module definition information will be stored statically
in a table supplied by [[modtrees.h]]; we'll cover the
details later.
<<header>>=
#include "nwbuffer.h"
int emit_module_named (FILE *out, char *rootname, char *locformat);
int notangle_sink(void *arg, NowebBuffer in, NowebBuffer out);
                                            /* expects cargs structure */
<<*>>=
static char rcsid[] = "$Id$";
static char rcsname[] = "$Name$";
@
<<*>>=
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include "strsave.h"
#include "getline.h"
#include "modules.h"
#include "modtrees.h"
#include "errors.h"
#include "match.h"
#include "nwbuffer.h"
#include "notangle.h"

<<Function declarations>>

int emit_module_named (FILE *out, char *rootname, char *locformat) {
    Module root = NULL; /* ptr to root module */

    (void) rcsid; (void) rcsname;  /* eliminate warning */

    root = lookup(rootname);
    <<error message and return nonzero if we couldn't find the root>>
    resetloc();
    (void) expand(root,0,0,0,locformat,out);
    putc('\n',out);                     /* make output end with newline */
    return 0;
}
@ %def notangle

We loop looking for the start of a code chunk.
When we find one, we get the name of the module in which the code
is to appear.  
Then we just keep adding lines to that module until
we see a terminator.
After we see the terminator we start all over again looking for another code
chunk.
<<header>>=
int read_defs(NowebBuffer in);              /* read module definitions */
<<*>>=
int read_defs(NowebBuffer in) {
    const char *modname = NULL; /* name of chunk currently being read, 
				   [[NULL]] if no chunk is being read */ 
    Module modptr = NULL;       /* ptr to current chunk, or NULL */
    NowebPair line;		/* input */
    NowebReader rdr = NowebBuffer_reader(in);
    Location loc;

    while ((line = NowebBuffer_read(rdr)) != NULL) {
        if (line->key == NW_FATAL) return 1; /* obsolete */
        <<track line numbers, then [[continue]] unless [[line]] is [[@begin code]]>>
        <<repeat [[line = NowebBuffer_read(rdr);]] until EOF, [[@defn]], or [[@text]]>>
        insist(line,NW_DEFN,"code chunk had no definition line");
        modname = line->u.value;
        warn_dots(modname);       /* names ending in ... aren't like web */
        modptr = insert(modname); /* find or add module in table */

        line = NowebBuffer_read(rdr);
        insist(line,NW_NL,"definition line not followed by newline");
        loc.lineno++;
        line = NowebBuffer_read(rdr);
        while ((line != NULL) && line->key != NW_END_CODE) {
	    switch (line->key) {
	      case NW_NL:
                addnewline(modptr);
                loc.lineno++;
		break;
              case NW_TEXT:
	        addstring(modptr, line->u.value, loc);
		break;
	      case NW_USE:
                warn_dots(line->u.value);
                addmodule(modptr,line->u.value);
		break;
	      case NW_INDEX_NL:
                loc.lineno++;
		break;
              <<cases for [[@file]] and [[@line]] that adjust [[loc]]>>
              default:
                if (!NowebBuffer_is_index(line->key)) {
                  <<complain of botched code chunk>>
	        }
	    }
            line = NowebBuffer_read(rdr);
        }
        <<if [[line==NULL]] die of premature end of file>>
    }
    return 0;
}
@ %def read_defs
<<repeat [[line = NowebBuffer_read(rdr);]] until EOF, [[@defn]], or [[@text]]>>=
do { line = NowebBuffer_read(rdr);
} while (line && line->key != NW_DEFN && line->key != NW_TEXT);
@
<<track line numbers, then [[continue]] unless [[line]] is [[@begin code]]>>=
switch (line->key) {
  case NW_NL: case NW_INDEX_NL:
    loc.lineno++;
    break;
  <<cases for [[@file]] and [[@line]] that adjust [[loc]]>>
  default:
    break;
} 
if (line->key != NW_BEGIN_CODE)
    continue;
@
The only tricky bit with the line numbers is to note that [[@line]] gives
the line number of the {\em following} line, not of the line on which the
[[@line]] appears.  That means [[loc.lineno]] must be decremented after it is 
set, so that the next newline will increment it to the correct value.
<<cases for [[@file]] and [[@line]] that adjust [[loc]]>>=
case NW_FILE:
    loc.filename = line->u.value;
    loc.lineno = 1;
    break;
case NW_LINE:
    <<save line number from [[line]] ([[@line ...]]) into [[loc.lineno]]>>
    loc.lineno--;
    break;
<<[[} else if (line]] contains [[@file]] or [[@line) {]] adjust [[loc]]>>=
} else if (line->key == NW_FILE) {
    loc.filename = line->u.value;
    loc.lineno = 1;
} else if (line->key == NW_LINE) {
    <<save line number from [[line]] ([[@line ...]]) into [[loc.lineno]]>>
    loc.lineno--;
@
When copying the module name or a file name, we have to strip the trailing newline.
\emph{May no longer need strcpy --- just use this name?}
<<save line number from [[line]] ([[@line ...]]) into [[loc.lineno]]>>=
{ <<fail if string [[line->u.value]] contains a non-digit>>
  loc.lineno = atoi(line->u.value);
}
<<fail if string [[line->u.value]] contains a non-digit>>=
{ const char *p;
  for (p = line->u.value; *p; p++)
    if (!isdigit(*p)) 
      errormsg(Error, "non-numeric line number in `@line %s'", line->u.value);
}
@
In {\tt WEB}, module names ending in ``...'' may be prefixes
for other names.
We don't do anything like that here, but we do warn the user about
``...'' in case he's got a file converted from {\tt WEB}.
<<*>>=
static
void warn_dots(const char *modname) {
  if (!strcmp(modname+strlen(modname)-3,"...")) 
    errormsg(Warning, "Chunk name @<<%s@>> isn't completed as in web", 
             modname);
}
@ %def warn_dots
<<Function declarations>>=
static void warn_dots(const char *modname);          /* warn about names ending in ... */
@ 
Error checking is perenially dull.
<<error message and return nonzero if we couldn't find the root>>=
if (root==NULL) {
    errormsg(Fatal, "The root chunk @<<%s@>> was not defined.", rootname);
    return 1;
}
<<*>>=
static void insist(NowebPair line, NowebKey keyword, char *msg) {
  <<if [[line==NULL]] die of premature end of file>>
  if (line->key != keyword)
    impossible(msg);
}
@ %def insist
<<if [[line==NULL]] die of premature end of file>>=
if (line==NULL) {
    impossible("End of file occurred in mid-chunk");
}
<<Function declarations>>=
static void insist(NowebPair line, NowebKey keyword, char *msg);
<<complain of botched code chunk>>=
errorat(loc.filename, loc.lineno, Error, "botched code chunk `%s'", line);
