% -*- mode: Noweb; noweb-code-mode: c-mode -*-

\section{Miscellaneous Lua code}

Because I can't easily create comparison functions in Lua (no
closure), and also because I'm tempted by looping thoughts, 
I write a Lua sort that uses C comparisons.

I also provide CRC code.

<<header>>=
extern void misc_open(void);
@ 
<<*>>=
#include <string.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include <list.h>
#include "lua.h"
#include "luadebug.h"
#include "lua-help.h"
<<header>>
<<functions>>
@ 

<<functions>>=
static int length(lua_Object l) {
  int i;
  lua_Object x;
  for (i = 1; ; i++) {
    lua_beginblock();
    lua_pushobject(l);
    lua_pushnumber((double)i);
    x = lua_getsubscript();
    lua_endblock();
    if (lua_isnil(x)) break;
  }
  return i - 1;
}
@ 
This code is \emph{not} reentrant.
Our [[qsort]] comparison function uses a Lua function stored in a
global variable.
<<functions>>=
static lua_Object compare_function;

static int compare(const void *a, const void *b) {
  int n;
  lua_beginblock();
  lua_pushobject(*(lua_Object *)a);
  lua_pushobject(*(lua_Object *)b);
  lua_callfunction(compare_function);
  n = (int) lua_getnumber(lua_getresult(1));
  lua_endblock();
  return n;
}
@ 
To sort: build an array, sort it, and build a new table.
<<functions>>=
static void sort(void) {
  lua_Object table, *array;
  int i, n;

  lua_get_args("sort", 2, LUA_FUNCTION, &compare_function, LUA_TABLE, &table);
  n = length(table);
  array = malloc(n * sizeof (*array));
  assert(array);
  <<fill [[array]] with elements of [[table]]>>
  qsort(array, n, sizeof(*array), compare);
  table = lua_createtable();  
  <<fill [[table]] with elements of [[array]]>>
  lua_pushobject(table);
  free(array);
  return;
}
@ 
<<fill [[array]] with elements of [[table]]>>=
for (i = 0; i < n; i++) {
  lua_pushobject(table);
  lua_pushnumber((double)(i+1));
  array[i] = lua_getsubscript();
}
<<fill [[table]] with elements of [[array]]>>=
for (i = 0; i < n; i++) {
  lua_pushobject(table);
  lua_pushnumber((double)(i+1));
  lua_pushobject(array[i]);
  lua_storesubscript();
}
@ 
This comparison ignores case.
<<functions>>=
static int strcasecmpx(const char *s1, const char *s2) {
  for (;;) {
    int n = tolower(*s1) - tolower(*s2);
    if (n != 0 || (n == 0 && *s1 == 0)) return n;
    s1++; s2++;
  }
}
@
This comparison doesn't ignore case, but it does bring together
strings that differ only in case.
<<functions>>=
static void alphacmp(void) {
  char *s1 = lua_getstring(lua_getparam(1));
  char *s2 = lua_getstring(lua_getparam(2));
  int n = strcasecmpx(s1, s2);
  if (n == 0) n = strcmp(s1, s2);
  lua_pushnumber((float)n);
}
@ 
Tracings
<<functions>>=
static void nwcalltrace(lua_Function f, char *file, int line) {
  static List_T callstack;
  char *class, *name;
  void *s = NULL;
  if (f != LUA_NOOBJECT) {
    class = lua_getobjname(f, &name);
    callstack = List_push(callstack, name);
    fprintf(stderr, "Entering %s %s at %s:%d\n", class, name, file, line);
  } else {
    callstack = List_pop(callstack, &s);
    fprintf(stderr, "Leaving function %s\n", s ? (char*)s : "<untraced>");
  }
}

static void trace(void) {
  static List_T hooks;
  lua_Object n;
  lua_get_args("trace", 1, ANY, &n);
  if (!lua_isnil(n)) {
    hooks = List_push(hooks, (void*)lua_callhook);
    lua_callhook = nwcalltrace;
  } else {
    hooks = List_pop(hooks, (void**)&lua_callhook);
  }
}
@ 
<<functions>>=
/* 32-bit Cyclic Redundancy Code  implemented by A. Appel 1986  
 
   this works only if POLY is a prime polynomial in the field
   of integers modulo 2, of order 32.  Since the representation of this
   won't fit in a 32-bit word, the high-order bit is implicit.
   IT MUST ALSO BE THE CASE that the coefficients of orders 31 down to 25
   are zero.  Fortunately, we have a candidate, from
	E. J. Watson, "Primitive Polynomials (Mod 2)", Math. Comp 16 (1962).
   It is:  x^32 + x^7 + x^5 + x^3 + x^2 + x^1 + x^0

   Now we reverse the bits to get:
	111101010000000000000000000000001  in binary  (but drop the last 1)
           f   5   0   0   0   0   0   0  in hex
*/

#define POLY 0xf5000000

static unsigned long table[256];

static void init_crc(void)
{int i,j; unsigned long sum;
 for (i=0; i<256; i++)
   {sum=0;
    for(j= 8-1; j>=0; j=j-1)
     if (i&(1@<<j)) sum ^= ((unsigned long)POLY)@>>j;
    table[i]=sum;
   }
}

static unsigned long crc(char *s) {
  unsigned long sum=0, c;
  while ((c = *(unsigned char*)s++)) sum =  (sum>>8) ^ table[(sum^c)&0xff];
  return sum;
}
@ 
Lua numbers don't have enough bits of precision to represent a 32-bit
CRC.
<<functions>>=
static char alphacodes[] = 
  "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";

#define NUMCODES ((unsigned long)(sizeof(alphacodes)-1))

static void alphacode_crc(void) {
  unsigned long sum = crc(lua_getstring(lua_getparam(1)));
  char code[10], *s;

  s = &code[sizeof(code)];
  *--s = '\0';
  while (sum >= NUMCODES) {
    *--s = alphacodes[sum % NUMCODES];
    sum = sum / NUMCODES;
  }
  *--s = alphacodes[sum];
  assert(s >= code);
  lua_pushstring(s);
}
<<functions>>=
void misc_open(void) {
  init_crc();
  lua_register("sort", sort);
  lua_register("alphacmp", alphacmp);
  lua_register("calltrace", trace);
  lua_register("alphacode_crc", alphacode_crc);
}  
<<hackers: entries for miscellaneous functions>>=
alphacmp&
A comparison function for sorting.
Strings that differ only in case are treated as different, but they are
sorted adjacently.\\
calltrace&
If the argument is non-nil, traces every call and return of a Lua
function.
If the argument is nil, turns off tracing.\\
sort&
Takes a comparison function and a table, and sorts the table using the
C~library \emph{quicksort} function.\\
@ 

