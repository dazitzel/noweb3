% -*- mode: Noweb; noweb-code-mode: c-mode -*-

<<header>>=
<<*>>=
#include <lua.h>

#include "lua-help.h"
#include "nwbuffer.h"
#include "atom.h"

<<functions>>
@ 
<<functions>>=
static void new_lua(void) {
  lua_get_args("NWB.new", 0);
  lua_pushusertag(NowebBuffer_create(), NWBUFFER);
}
<<functions>>=
static void reader_lua(void) {
  lua_Object buf;
  lua_get_args("NWB.reader", 1, NWBUFFER, &buf);
  lua_pushusertag(NowebBuffer_reader(lua_getuserdata(buf)), NWREADER);
}
<<functions>>=
static void read_lua(void) {
  lua_Object rdr;
  NowebPair p;
  lua_get_args("NWB.read", 1, NWREADER, &rdr);
  p = NowebBuffer_read(lua_getuserdata(rdr));
  if (p) {
    if (p->key == NW_XXX_STRINGKEY) {
      lua_pushstring((char *)p->keystr);
      lua_pushoptstring(p->value);
    } else {
      lua_pushusertag((void *)p->key, NWKEY);
      lua_pushoptstring(p->value);
    }
  } else {
    lua_pushnil();
    lua_pushnil();
  }
}
@ 
<<functions>>=
static void put_lua(void) {
  lua_Object buf, key, val;
  lua_get_args("NWB.put", 3, NWBUFFER, &buf, NWKEY | LUA_STRING, &key,
	                     OPTIONAL | LUA_STRING, &val);
  if (lua_isstring(key))
    NowebBuffer_put_str(lua_getuserdata(buf), Atom_string(lua_getstring(key)),
	                   lua_optatom(val));
  else
    NowebBuffer_put(lua_getuserdata(buf), (NowebKey)lua_getuserdata(key),
		       lua_optatom(val));
}
@ 
<<functions>>=
static void pull_lua(void) {
  lua_Object buf;
  lua_get_args("NWB.pull", 1, NWBUFFER, &buf);
  if (NowebBuffer_length(lua_getuserdata(buf)) > 0) {
    struct NowebPair pair = NowebBuffer_pull(lua_getuserdata(buf));
    if (pair.key == NW_XXX_STRINGKEY) {
      lua_pushstring((char *)pair.keystr);
      lua_pushoptstring(pair.value);
    } else {
      lua_pushusertag((void *)pair.key, NWKEY);
      lua_pushoptstring(pair.value);
    }
  } else { 
    lua_pushnil();
    lua_pushnil();
  }
}
@ 
<<functions>>=
void nwbuffer_open(void) {
  lua_module_register("NWB", "new",    new_lua);
  lua_module_register("NWB", "reader", reader_lua);
  lua_module_register("NWB", "read",   read_lua);
  lua_module_register("NWB", "put", put_lua);
  lua_module_register("NWB", "pull", pull_lua);
#define xx(NAME, PRINTARGS) \
  lua_pushusertag((void*)NAME, NWKEY); lua_storeglobal(#NAME);
  <<key macros>>
#undef xx
  lua_pushnumber(NWKEY);    lua_storeglobal("NWKEY");
  lua_pushnumber(NWBUFFER); lua_storeglobal("NWBUFFER");
  lua_pushnumber(NWREADER); lua_storeglobal("NWREADER");
}
