% -*- mode: Noweb; noweb-code-mode: c-mode; c-indent-level: 4 -*-
\section{Scanning for uses of identifiers}
\subsection{Main program}
<<*>>=
static char rcsid[] = "$Id$";
static char rcsname[] = "$Name$";
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include "errors.h"
#include "match.h"
#include "getline.h"
#include "recognize.h"
#include "nwbuffer.h"
#include "cargs.h"
#include <atom.h>
@
These choices of alphanumerics and symbols seem to work for most languages.
Making [[@]] alphanumeric helps {\LaTeX}, and making [[#]]
alphanumeric helps avoid false hits on C preprocessor directives like
[[#define]] and [[#include]].
<<*>>=
static Recognizer nwindex;
#define ALPHANUM "_'@ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789#"
#define SYMBOLS "!%^&*-+:=|~<>./?`"
/* note $ and \ both delimiters */
@ %def ALPHANUM SYMBOLS

By default, find uses within quoted code ([[[[...]]]]).
<<*>>=
static int showquotes = 1;
<<typedefs>>
<<local prototypes>>
<<*>>=
int finduses_filter(void *arg, NowebBuffer in, NowebBuffer out) {
    CArgs args = arg;
    int argc = args->argc;
    char **argv = args->argv;
    FILE *fp;
    int i;

    progname = argv[0];	
    for (i = 1; i < argc && argv[i][0] == '-' && argv[i][1] != 0; i++)
        if (!strcmp(argv[i], "-noquote"))
            showquotes = 0;
        else
            errormsg(Error, "%s: unknown option %s\n", progname, argv[i]);
    nwindex = new_recognizer(ALPHANUM, SYMBOLS);
    if (i == argc) {
       <<add uses to buffer [[in]], grabbing defns from buffer [[in]]>>
    } else {
       <<read identifiers to be defined from files named in [[argv]]>>
       stop_adding(nwindex);
       add_use_markers(in, out);
    }
    return 0;
}
@
<<read identifiers to be defined from files named in [[argv]]>>=
for (; i < argc; i++)
    if ((fp=fopen(argv[i],"r"))==NULL)
        errormsg(Error, "%s: couldn't open file %s\n", progname, argv[i]);
    else {
        read_ids(fp);
        fclose(fp);
    }
<<local prototypes>>=
static void read_ids(FILE *in);
<<*>>=
static void read_ids(FILE *in) {
    char *line;
    while ((line = getline(in)) != NULL) {
        if (line[strlen(line)-1] == '\n') line[strlen(line)-1] = 0;
        add_ident(nwindex, Atom_string(line));
    }
}
@ %def read_ids
<<add uses to buffer [[in]], grabbing defns from buffer [[in]]>>=
{   NowebReader rdr = NowebBuffer_reader(in);
    NowebPair p;

    while ((p = NowebBuffer_read(rdr))) {
      switch (p->key) {
        case NW_INDEX_DEFN: case NW_INDEX_LOCALDEFN:
	  add_ident(nwindex, p->u.value); break;
        case NW_FATAL:
	  return 1;
        default:
          break;
      }
    }
    stop_adding(nwindex);
    add_use_markers(in, out);
}
<<typedefs>>=
typedef struct line_and_outfile {
    const char *line;
    NowebBuffer out;
} LineOut;
<<local prototypes>>=
static void add_use_markers(NowebBuffer in, NowebBuffer out);
<<*>>=
static void add_use_markers(NowebBuffer in, NowebBuffer out) {
    int incode = 0;
    NowebReader rdr = NowebBuffer_reader(in);
    NowebPair p;
    LineOut info; info.line = (char *)0; info.out = out;
    
    while ((p = NowebBuffer_read(rdr)) != NULL) {
        if (p->key == NW_BEGIN_CODE || (showquotes && p->key == NW_QUOTE))
            incode = 1;
        else if (p->key == NW_END_CODE || p->key == NW_ENDQUOTE)
            incode = 0;
        if (incode && p->key == NW_TEXT) {
            info.line = p->u.value;
            search_for_ident(nwindex, p->u.value, write_index_use, &info);
            if (*info.line) 
                NowebBuffer_put(out, NW_TEXT,
				info.line == p->u.value ? p->u.value
				                        : Atom_string(info.line));
        } else
            NowebBuffer_put_pair(out, p);
    }       
}
@ %def add_use_markers

We gradually cut out the uses, and the tail of the line is left in [[info.line]],
to be printed by the code above.
There's a tricky bug lurking here---if one identifier is a prefix of another,
but both are recognized (as with the C$++$ [[::]] separator), we have to avoid
writing them both out in full, because that would duplicate text unnecessarily.
As a result, we always emit the line in pieces.
The function [[emit_up_to(f, s, limit)]] emits the piece of the string [[s]] up to 
but not including [[limit]], if any.
It returns [[limit]] or [[s]], whichever is greater.
<<*>>=
static void write_index_use(void *closure, const char *id, const char *instance) {
  LineOut *info = (LineOut *) closure;
  info->line = emit_up_to(info->out, info->line, instance);
  NowebBuffer_put(info->out, NW_INDEX_USE, id);
  info->line = emit_up_to(info->out, info->line, instance + strlen(id));
}
@ %def write_index_use
<<*>>=
static const char *emit_up_to(NowebBuffer b, const char *s, const char *limit) {
  if (s < limit) {
    NowebBuffer_put(b, NW_TEXT, Atom_new(s, limit-s));
    return limit;
  } else {
    return s;
  }
}
<<local prototypes>>=
static void write_index_use(void *closure, const char *id, const char *instance);
static const char *emit_up_to(NowebBuffer b, const char *s, const char *limit);
