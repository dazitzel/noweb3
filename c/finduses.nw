\section{Scanning for uses of identifiers}
\subsection{Main program}
<<*>>=
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include "errors.h"
#include "match.h"
#include "getline.h"
#include "recognize.h"
@
These choices of alphanumerics and symbols seem to work for most languages.
<<*>>=
static Recognizer nwindex;
#define ALPHANUM "_'@ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
#define SYMBOLS "!#%^&*-+:=|~<>./?`"
/* note $ and \ both delimiters */
@ %def ALPHANUM SYMBOLS

By default, find uses within quoted code ([[[[...]]]]).
<<*>>=
static int showquotes = 1;
<<local prototypes>>
<<*>>=
main(int argc, char **argv) {
    FILE *fp;
    char *myself = *argv;
    int i;

    for (i = 1; i < argc && argv[i][0] == '-' && argv[i][1] != 0; i++)
        if (!strcmp(argv[i], "-noquote"))
            showquotes = 0;
        else
            errormsg(Error, "%s: unknown option -%c\n", myself, argv[i][1]);
    nwindex = new_recognizer(ALPHANUM, SYMBOLS);
    if (i == argc) {
       <<add uses to stdin, grabbing defns from stdin>>
    } else {
       <<read identifiers to be defined from files named in [[argv]]>>
       stop_adding(nwindex);
       add_use_markers(stdin, stdout);
    }
    exit(errorlevel);
    return errorlevel;		/* slay warning */
}
@
<<read identifiers to be defined from files named in [[argv]]>>=
for (; i < argc; i++)
    if ((fp=fopen(argv[i],"r"))==NULL)
        errormsg(Error, "%s: couldn't open file %s\n", myself, argv[i]);
    else {
        read_ids(fp);
        fclose(fp);
    }
<<local prototypes>>=
static void read_ids(FILE *in);
<<*>>=
static void read_ids(FILE *in) {
    char *line;
    while ((line = getline(in)) != NULL) {
        if (line[strlen(line)-1] == '\n') line[strlen(line)-1] = 0;
        add_ident(nwindex, line);
    }
}
@ %def read_ids
<<add uses to stdin, grabbing defns from stdin>>=
{   FILE *tmp = tmpfile();
    char *line;
    if (tmp == NULL) <<complain about opening temp file and exit>>
    while ((line = getline(stdin)) != NULL) {
        if (fputs(line, tmp) == EOF) <<complain about writing temp file and exit>>
        if (is_index(line, "defn")) {
            if (line[strlen(line)-1] == '\n') line[strlen(line)-1] = 0;
            add_ident(nwindex, line+1+5+1+4+1);
        }
    }
    rewind(tmp);
    stop_adding(nwindex);
    add_use_markers(tmp, stdout);
}
<<local prototypes>>=
static void add_use_markers(FILE *in, FILE *out);
<<*>>=
static void add_use_markers(FILE *in, FILE *out) {
    char *line;
    int incode = 0;
    while ((line = getline(in)) != NULL) {
	fprintf(out, "%s", line);
        if (is_begin(line, "code") || showquotes && is_keyword(line, "quote"))
	    incode = 1;
	else if (is_end(line, "code") || is_keyword(line, "endquote"))
	    incode = 0;
	else if (is_keyword(line, "text") && incode)
	    search_for_ident(nwindex, line, write_index_use, out);
    }	    
}
@ %def add_use_markers
<<local prototypes>>=
static void write_index_use(void *closure, char *id);
<<*>>=
static void write_index_use(void *closure, char *id) {
  FILE *out = (FILE *) closure;
  fprintf(out, "@index use %s\n", id);
}
@ %def write_index_use
<<complain about opening temp file and exit>>=
errormsg(Fatal, "%s: couldn't open temporary file\n");
<<complain about writing temp file and exit>>=
errormsg(Fatal, "%s: error writing temporary file\n");