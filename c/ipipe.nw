% -*- mode: Noweb; noweb-code-mode: c-mode -*-

\ifx\chapter\undefined\let\chapter=\section\fi

\chapter {Noweb internal pipeline}

This is the design of the Noweb internal pipeline, which will be a
series of program stages passing binary data to and from each other
using the unbounded NowebBuffer.  This pipeline structure will pass
ASCII information to and from the external pipeline as well.

\section {Interface}

A pipeline is a \emph{source}, followed by zero or more
\emph{filters}, followed by a sink.
The original version of this interface used different static types for
sources, filters, and sinks, but this organization caused much
functionality to be implemented in triplicate.
After seeing the code, I~decided it was better to eliminate the
redundancy even though it meant giving up static type checking.
Accordingly, I~use a single C type---the \emph{stage}---to represent
sources, filters, sinks, and pipelines.
A source is a stage that ignores its input buffer, and a sink is a
stage that writes nothing to its output buffer.
All other stages are filters.
<<ipipe.h>>=
#ifndef IPIPE_H
#define IPIPE_H

#include <stdio.h>
#include <stdlib.h>
#include "nwbuffer.h"
#include "nwtime.h"

typedef struct IPipe_stage *IPipe_T, *IPipe_Source, *IPipe_Filter, *IPipe_Sink;

<<exported functions and values>>
#endif
@ 
We create a stage by providing a suitable function.
[[IPipe_connect]] performs all connections:
\newcommand\source{\mathit{source}}
\newcommand\sink{\mathit{sink}}
\newcommand\filter{\mathit{filter}}
\newcommand\con{\mathbin{\cdot}}
% l2h substitution source <i>source</i>
% l2h substitution sink <i>sink</i>
% l2h substitution filter <i>filter</i>
% l2h substitution con &lt;-&gt;
\begin{eqnarray*}
\source \con \filter &=& \source \\
\source \con \sink   &=& \mathit{pipeline} \\
\filter \con \filter &=& \filter \\
\filter \con \sink   &=& \sink \\
\end{eqnarray*}
This example should suggest why distinct static types were deemed
undesirable. 
<<exported functions and values>>=
extern IPipe_T IPipe_stage(const char *name,
                           int (*stage)(void*, NowebBuffer, NowebBuffer),
			   void* arg);
extern IPipe_T IPipe_connect(IPipe_T, IPipe_T);
@ 
We provide an identity filter $\mathit{id}$; it is both a left and
right identity for~$\con$.
As with all filters, it is an unchecked runtime error to run a
pipeline consisting solely of the identity.
<<exported functions and values>>=
extern IPipe_Filter IPipe_identity;
@ 
Once completed, a pipeline may be run, printed, or freed from memory.
To be printed nicely, a pipeline should be preceded by two blanks and
followed by a newline.
To print an argument, a printer has to be registered.
<<exported functions and values>>=
extern int  IPipe_run    (IPipe_T pipe, NowebBuffer in, NowebBuffer out);
extern void IPipe_print  (FILE *fp, IPipe_T pipe);
extern void IPipe_printer(int (*stage)(void*, NowebBuffer, NowebBuffer),
                          void (*printer)(FILE *fp, void *env, void *arg),
                          void *env);
extern void IPipe_free   (IPipe_T *pipe);
@ 
\section{Implementation}
Here's what the implementation looks like.
<<ipipe.c>>=
#include "ipipe.h"
#include "nwbuffer.h"
#include <stdio.h>
#include <mem.h>
#include <assert.h>

<<type definitions>>
<<internal prototypes>>
<<functions>>
@ 
The basic data type, stage, is just a disjoint union.
<<type definitions>>=
struct IPipe_stage {
  int isPair;
  union {
    struct {
      IPipe_T left, right;
    } pair;
    struct {
      const char *name;		/* identifies the stage */
      int (*stage)(void*, NowebBuffer, NowebBuffer);
      void* arg;
    } leaf;
  } u;
};
@ 
The create functions simply allocate space for the particular type and set
the appropriate data members equal to the parameters.
<<functions>>=
IPipe_T IPipe_stage(const char *name, int (*stage)(void*, NowebBuffer, NowebBuffer),
                    void* arg) {
  IPipe_T p = ALLOC(sizeof(*p));
  p->isPair = 0;
  p->u.leaf.name = name;
  p->u.leaf.stage = stage;
  p->u.leaf.arg = arg;
  return p;
}
@ 
Note the identity is a flagrant cheat.
<<functions>>=
static struct IPipe_stage identity;
IPipe_Filter IPipe_identity = &identity;

IPipe_T IPipe_connect(IPipe_T l, IPipe_T r) {
  IPipe_T p;
  if (l == IPipe_identity) return r;
  if (r == IPipe_identity) return l;
  NEW(p);
  p->isPair = 1;
  p->u.pair.left  = l;
  p->u.pair.right = r;
  return p;
}
@ 
The pipeline is executed by a recursive function.
We always pass input and output buffers.
For a leaf, we simply run the leaf stage with these buffers.
For a pair, we cons up a new buffer to connect the two halves, then
run each half.
Note that we run both halves even if the first half fails---it's not
clear if that's a good design decision.
<<functions>>=
int IPipe_run(IPipe_T p, NowebBuffer in, NowebBuffer out) {
  if (p->isPair) {
    NowebBuffer pipe = NowebBuffer_create();
    int rc  = IPipe_run(p->u.pair.left,  in,   pipe);
    rc     |= IPipe_run(p->u.pair.right, pipe, out);
    NowebBuffer_free(&pipe);
    return rc;
  } else if (getenv("NW3TIME")) {
    NWTime now = NWTime_now();
    int rc;
    assert(p->u.leaf.stage);
    rc = p->u.leaf.stage(p->u.leaf.arg, in, out);
    fprintf(stderr, "%6.3fs: ", NWTime_usdiff(now) * 1.0e-6);
    IPipe_print(stderr, p);
    fprintf(stderr, "\n");
    NWTime_free(now);
    return rc;
  } else {
    assert(p->u.leaf.stage);
    return p->u.leaf.stage(p->u.leaf.arg, in, out);
  }
}
@ 
We print a pipeline without its preceding indentation or its trailing newline.
<<functions>>=
void IPipe_print(FILE *fp, IPipe_T p) {
  if (p->isPair) {
    IPipe_print(fp, p->u.pair.left);
    fprintf(fp, "\n| ");
    IPipe_print(fp, p->u.pair.right);
  } else
    fprintf(fp, "%s", p->u.leaf.name);
    print_arg(fp, p->u.leaf.stage, p->u.leaf.arg);
}
@ 
<<internal prototypes>>=
typedef int (*stagefun)(void*, NowebBuffer, NowebBuffer);
static void print_arg (FILE *fp, stagefun stage, void*arg);
<<functions>>=
struct known_printer {
    stagefun stage;
    void (*printer)(FILE *fp, void *env, void *arg);
    void *env;
    struct known_printer *prev;
};

static struct known_printer *printers = NULL;

void IPipe_printer(int (*stage)(void*, NowebBuffer, NowebBuffer),
                   void (*printer)(FILE *fp, void *env, void *arg),
                   void *env) {
  struct known_printer *p = malloc(sizeof(*p));
  assert(p);
  p->stage = stage;
  p->printer = printer;
  p->env = env;
  p->prev = printers;
  printers = p;
}
<<functions>>=
static void print_arg (FILE *fp, stagefun stage, void*arg) {
  struct known_printer *p;
  for (p = printers; p != NULL && p->stage != stage; p = p->prev)
    ;
  if (p) {
    fprintf(fp, ", ");
    p->printer(fp, p->env, arg);
  }
}
@ 
Freeing means walking the tree.
<<functions>>=
void IPipe_free(IPipe_T *pp) {
  if ((*pp)->isPair) {
    IPipe_free(&(*pp)->u.pair.left);
    IPipe_free(&(*pp)->u.pair.right);
  }
  FREE(pp);
  *pp = (IPipe_T)0;
}
<<*>>=
<<ipipe.c>>
<<header>>=
<<ipipe.h>>
@
