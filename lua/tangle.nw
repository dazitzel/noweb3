
<<*>>=
-- Copyright 1991 by Norman Ramsey.  All rights reserved.
-- See file COPYRIGHT for more information.
$debug
markup = Stages.markup; nt = Stages.nt
opt = List.new {}
arg = List.new {}
markopt = List.new {}
filters = List.new {}
verbose = nil

while List.length(argv) > 0 do
  a = List.get(argv)
  globmatch a of
  | "-e" => dostring(List.get(argv))
  | "-internal" => markup = Stages.markup; nt = Stages.nt
  | "-external" => markup = libFile("markup"); nt = libFile("nt")
  | "-v" => verbose = 1
  | "-ml", "-m3", "-awk", "-icn", "-icon", "-pascal", 
    "-c", "-c++", "-f77", "-f90", "-tex" => -- deliberately ignore nountangle args
  | "-t" => -- this is the default
  | "-t*" =>   -- copy tabs at markup, use width given in notangle
	      List.put(markopt, "-t")
      	      List.put(opt, a)
  | "-filter" => List.put(filters, MD.stringFilter(List.get(argv)))
  | "-ifilter" =>
      dostring("if 1 then local f, arg = " .. List.get(argv) .. 
               "; List.put(filters, MPipe.filter(f, arg)) end")
  | "-markup" => markup = List.get(argv)
  | "-w[0-9]", "-w[0-9][0-9]*" =>  -- ignore arg meant for nountangle
  | "-L*" => List.put(markopt, "-t"); List.put(opt, "-t"); List.put(opt, a)
  | "-"   => List.put(arg, a)
  | "-cpif", "-cp" => List.put(opt, a); List.put(opt, List.get(argv))
  | "-*"  => List.put(opt, a)
  | "*"   => List.put(arg, a)
  else => error("This can't happen! Arg did not match *: " .. a)
  end
end

P = MPipe

if System.getenv("PATH") then
  System.putenv("PATH=" .. System.getenv("PATH") .. ":" .. LIB)
end

-- write("opt has length ", List.length(opt), "\n")
-- write("markopt has length ", List.length(markopt), "\n")
-- write("arg has length ", List.length(arg), "\n")
-- write("opt = ", image(opt), '\n')
-- write("arg = ", image(arg), '\n')
-- write("markopt = ", image(markopt), '\n')

p = P.source(markup, markopt .. arg)
while List.length(filters) > 0 do 
  p = p .. List.get(filters)
end
p = p .. P.sink(nt, opt)
if verbose then 
  local out = writetox(stderr)
  P.print(p)
  write("\n")
  writeto(out)
end
exit(P.run(p))
@ 
This goo makes it a shell script
<<notangle>>=
#!/bin/sh
<<copyright notice>>
# $Id$
# $Name$
LIB=|LIBDIR|
$LIB/nosh ${1+"$@"} << EOF
<<notangle.lua>>
EOF
@ 
