\section{Convert Noweb pipeline back to ASCII form}
<<*>>=
-- Copyright 1991,1999 by Norman Ramsey.  All rights reserved.
-- See file COPYRIGHT for more information.

function Stages.unmarkup (buf, outfile)
  local oldout, r, key, arg
  local rcsid = "$Id$"
  local rcsname = "$Name$"
  if outfile then
    oldout = writetox(outfile)
  end
  r = NWB.reader(buf)
  key, arg = NWB.read(r)
  local code, dangling_text, defline, deflines, space_pending
  while key do
    case key of
    <<cases for unmarkup>>
    end
    key, arg = NWB.read(r)
  end
  if outfile then
    writetox(oldout)
  end
  return 0
end
@ 
<<cases for unmarkup>>=
| NW_BEGIN_DOCS =>  if arg ~= "0" then write('@'); space_pending = 1 end
| NW_BEGIN_CODE =>  code = 1
| NW_END_DOCS, NW_END_CODE =>
		code = nil
		if dangling_text then write('\n') end
		dangling_text = nil
                write(deflines)
                if defline ~= "" then write(defline, '\n') end
                deflines = "" ; defline = ""
| NW_DEFN =>    write('@<<', arg, '@>>=')
| NW_TEXT => if arg ~= '' then
               arg = gsub(arg, "<<", "@<<")
               arg = gsub(arg, ">>", "@>>")
               if not (code or quoting) then
                 arg = gsub(arg, '%[%[', "@[[")
                 arg = gsub(arg, '%]%]', "@]]")
               end
	       <<emit pending space, if any>>
               write(arg)
               dangling_text = 1
             end
| NW_QUOTE    => <<emit pending space, if any>>
                 write("[["); dangling_text = 1; quoting = 1
| NW_ENDQUOTE => <<emit pending space, if any>>
                 write("]]"); dangling_text = 1; quoting = nil
| NW_NL       => write("\n"); space_pending = nil; dangling_text = nil
| NW_INDEX_DEFN =>
     if defline == "" then defline = "@ %def" end
     defline = defline .. " " .. arg
| NW_INDEX_NL =>
     deflines = deflines .. defline .. "\n"
     defline = ""
| NW_USE => write('@<<' .. arg .. '@>>')
            dangling_text = 1
else => -- do nothing
@ This trick delays a space after~[[@]] until it is seen to be
warranted.  That way, we avoid a trailing space when the [[@]] that ends a
documentation chunk appears on a line by itself.
<<emit pending space, if any>>=
if space_pending then
  write(' ')
  space_pending = nil
end
@ 

