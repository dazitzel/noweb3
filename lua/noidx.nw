\documentstyle[noweb]{article}
\pagestyle{noweb}\noweboptions{shortxref}
\begin{document}
Missing ``{\tt @xref tag} {\it label tag},'' where {\it label} is the name of 
a label and {\it tag} is a chunk number, page number, sub-page number, or
other identifying mark.
@
\section{Cross-reference and index support}
<<*>>=
function Stages.noidx(sourcebuf, sinkbuf, args)
--global lines		# all the input lines
--global delay		# non-null if markup should be delayed past the first chunk 
--global anchordist	# max distance before code chunk to place defining @xref label

  <<initialization>>
  delay = nil
  <<swallow [[args]]>>
  r = NWB.reader(sourcebuf)
  key, arg = NWB.read(r)
  while key do
    case key of
    <<cases for pass 1>>
    end
    key, arg = NWB.read(r)
  end

  r = NWB.reader(sourcebuf)
  key, arg = NWB.read(r)
  while key do
    case key of
    <<cases for pass 2>>
    end
    key, arg = NWB.read(r)
  end

  <<write trailers if not already written>>
end
@
<<swallow [[args]]>>=
while List.length(args) > 0 do
  local a = List.get(args) 
  case a of
  | "-delay" => delay = 1
  | "-docanchor" => anchordist = tonumber(List.get(args)) or anchordist
  else => noweb_error("unknown argument ", a)
end
@
<<*>>=
--global curfile		# unique id of the current @file
--global lastbeginarg	# identifies last chunk (for -delay)
<<initialization>>=
curfile = "standard input?"
lastbeginarg = "never any chunks?"
@
[[anchorlabel]] is the label that references to a code chunk refer to.
The {\LaTeX} back end typically uses the chunk itself, but the HTML
back end will use a spot in the preceding documentation chunk (if
any), as requested by [[-docanchor]] (and non-null [[anchordist]])
and recorded in [[anchorlabel]].
<<*>>=
--global allchunks, allidents
--global indexlabels, defanchors, uses, anchorlabel, indexanchorlabel
<<initialization>>=
allchunks = Set.new ()
allidents = Set.new ()
indexlabels = { }
defanchors = { }
uses = { }
anchorlabel = { }
indexanchorlabel = { }
@
I set [[textnonblank]] non-null if some text line in the current chunk
contains a non-blank character.
This trick lets me avoid planting anchors in empty documentation chunks.
<<cases for pass 1>>=
 --  static lastdefnlabel, thisusecount, lastanchorlabel, nonblank, textnonblank
 --  initial nonblank = ~' \t'

| NW_FILE => curfile = uniqueid(arg)
| NW_BEGIN_DOCS, NW_BEGIN_CODE => lastbegin = key; textnonblank = nil
| NW_END_DOCS => if anchordist and textnonblank then
                   <<insert and set [[lastanchorlabel]]>>
                 end
| NW_END_CODE => lastanchorlabel = nil
| NW_TEXT => textnonblank = textnonblank or strfind(arg, '[%S]')
| NW_DEFN => 
        Set.insert(allchunks, arg)
        lastdefnlabel = newdefnlabel(arg)
        slipin(NW_XREF_LABEL, lastdefnlabel)
        lastanchorlabel = lastanchorlabel or lastdefnlabel
        anchorlabel[arg] = anchorlabel[arg] or lastanchorlabel
        addlabel(defanchors, arg, lastanchorlabel)
        addud(chunkud, "defn", arg, lastanchorlabel)
        thisusecount = 0
| NW_USE => 
   if lastbegin == NW_BEGIN_CODE then
          Set.insert(allchunks, arg)
          thisusecount = thisusecount + 1
          slipin(NW_XREF_LABEL, lastdefnlabel .. "-u" .. thisusecount)
          addlabel(uses, arg, lastanchorlabel)
          addud(chunkud, "use", arg, lastanchorlabel)
   else
          textnonblank = textnonblank or strfind(arg, '[%S]')   -- could appear in quoted code
   end
| NW_INDEX_USE =>
    Set.insert(allidents, arg)
    if lastanchorlabel then addud(indexud, "use", arg, lastanchorlabel) end
| NW_INDEX_DEFN, NW_INDEX_LOCALDEFN =>
    Set.insert(allidents, arg)
    if lastanchorlabel then
      l = lastanchorlabel
    else
      l = newdocslabel()
      slipin(NW_XREF_LABEL, l)
    end
    addud(indexud, "defn", arg, l)
    indexanchorlabel[arg] = indexanchorlabel[arg] or l
    slipin(NW_XREF_REF, l) -- bug fix
@ %def allchunks allidents indexlabels defanchors uses curfile lastbeginarg anchorlabel
The bug fix\label{multi-def-bug}
alluded to above occurs when there are multiple definitions of an identifier.
In this case, we can't just use [[indexanchorlabel[id]]], because that refers only to 
the first definition.  In the {\TeX} back end, that leads to bogus
tags like \hbox{\it x \small\rm 7b 7b 7b} instead of \hbox{\it x
\small\rm 7b 9 12a}; the first tag is repeated again and again.
Because the tag for the current [[@defn]] is lost by the time pass~2
rolls around, we have to slip it in on pass~1.
@
<<insert and set [[lastanchorlabel]]>>=
t = List.new {}; n = anchordist
lastanchorlabel = newdocslabel()
while lines[-1] ?
  if n = 0 | ="@begin docs" then
     { put(lines, "@xref label " .. lastanchorlabel); lines ..|:= t; break }
  else 
     { if ="@nl" & pos(0) then n -:= 1; push(t, pull(lines)) }
@
[[slipin]] sticks something into [[lines]] just before the current (last) line.
It makes sense only on the first pass.
<<*>>=
procedure slipin(s)
  local last
  last = pull(lines)
  every put(lines, s | last)
  return s
end
<<*>>=
procedure pass2(name, arg)
  static thesedefns, theseuses
  static thischunk # null for docs chunk, arg of @defn for code chunk
  static defout		# number of definitions emitted for each chunk
  initial defout = table(0)
  case name of {
    "begin" : {
       if \delay & lastbeginarg == arg then <<write trailers if not already written>>
       <<copy [[name]] and [[arg]] to output>>
       every thesedefns | theseuses = set()
       thischunk = nil
    }
    "defn" : { thischunk = arg; 
               write("@xref ref " .. anchorlabel[arg])
               <<copy [[name]] and [[arg]] to output>> 
               <<write chunk cross-reference>>
             }
# must postpone index cross-reference to end of chunk because
# the info is accumulated in [[thesdefns]] and [[theseuses]] on this pass
    "end" :  { if match("code", arg) then {<<write index cross-reference>>}
               <<copy [[name]] and [[arg]] to output>> 
             }
    "use"  : { write("@xref ref " .. (\anchorlabel[arg] | "nw@notdef")) # was "???"
               <<copy [[name]] and [[arg]] to output>> 
             }
    "index" : {
       <<shift [[name]] and [[arg]]>>
       case name of {
         "defn" | "localdefn" : { 
                    insert(thesedefns, arg)
                    # no xref ref because of bug fix
		  }
         "use"  : { insert(theseuses, arg)
                    write("@xref ref ", \indexanchorlabel[arg])
		  }
       }
       name = "index " .. name
       <<copy [[name]] and [[arg]] to output>>
    }
    "text" : # grotesque hack! for chunks and index in HTML
       if /thischunk then # docs mode
         case arg of { 
       	   "<nowebchunks>" : lognowebchunks()
           "<nowebindex>"  : lognowebindex()
           default : <<copy [[name]] and [[arg]] to output>>
       	 }
       else <<copy [[name]] and [[arg]] to output>>
    "fatal" : { <<copy [[name]] and [[arg]] to output>>; exit(1) }
    "trailer" : { <<write trailers if not already written>>
                  <<copy [[name]] and [[arg]] to output>>
                }
    default : <<copy [[name]] and [[arg]] to output>>
  }
  return
end
@ %def thischunk thislabel thesedefns theseuses
The case of the [[@index defn]] is the one case where we don't emit a
reference, because the reference has to go in earlier.  See
page~\pageref{multi-def-bug} for an explanation.
@
<<write chunk cross-reference>>=
defout[thischunk] +:= 1
write("@xref prevdef ", defanchors[thischunk][defout[thischunk] - 1]) # fail if first
write("@xref nextdef ", defanchors[thischunk][defout[thischunk] + 1]) # faif if last
if defout[thischunk] = 1 then {<<write use and def summary for chunk cross-reference>>}
<<write index cross-reference>>=
theseuses --:= thesedefns
if *thesedefns > 0 then {
  write("@index begindefs")
  every i = !alphasort(thesedefns) do {
    every u = !\indexud[i] do u ? if ="use " then write("@index isused ", tab(0))
    write("@index defitem ", i)
  }
  write("@index enddefs")
}
if *theseuses > 0 then {
  l = alphasort(theseuses)
  write("@index beginuses")
  every i = !alphasort(theseuses) do {
    every d = !\indexud[i] do d ? if ="defn " then write("@index isdefined ", tab(0))
    write("@index useitem ", i)
  }
  write("@index enduses")
}
#  every write("@literal \\nwindexuse{", TeXliteral(ident = !l), "}",
#                          "{", indexlabels[ident], "}{", thislabel, "}")
<<write use and def summary for chunk cross-reference>>=
if *defanchors[thischunk] > 1 then {
  write("@xref begindefs")
  every write("@xref defitem ", defanchors[thischunk][2 to *defanchors[thischunk]])
  write("@xref enddefs")
}
if \uses[thischunk] then {
  write("@xref beginuses")
  every write("@xref useitem ", !uses[thischunk])
  write("@xref enduses")
} else 
  write("@xref notused ", thischunk)
@
<<shift [[name]] and [[arg]]>>=
{ arg ? { name = tab(upto(' ')|0); arg = if =" " then tab(0) else nil } }
<<copy [[name]] and [[arg]] to output>>=
write("@", name, (" " .. \arg) | "")
<<*>>=
procedure newdefnlabel(arg)
  /defanchors[arg] = []
  return "NW" .. curfile .. "-" .. uniqueid(arg) .. "-" .. alphacode(1+*defanchors[arg])
end
<<*>>=
procedure newdocslabel()
  static count
  initial count = 0
  return "NWD" .. alphacode(count +:= 1)
end
<<*>>=
procedure addlabel(tbl, arg, label)
  /tbl[arg] = []
  if tbl[arg][-1] == label then nil
  else put(tbl[arg], label)
  return label
end
<<*>>=      
global chunkud, indexud
procedure addud(udlist, name, arg, label)
  /udlist[arg] = []
  s = name .. " " .. label
  return udlist[arg][-1] == s | put(udlist[arg], s)
end
<<initialization>>=
every chunkud | indexud = table();
@
Because it's silly to have both a use and a definition point to the same chunk, 
I strip out uses that list the same chunk as their definitions.
<<*>>=
procedure strip_extra_uses(udlista)
  local old, new, item
  old = copy(udlista)
  new = []
  while item = get(old) do
    item ? 
      if ="defn " then 
        <<add item if needed>>
      else if ="use " then 
        if "defn " .. tab(0) == !(old|new) then
          nil # write(&errout, "Stripped extra ", item)
        else
          <<add item if needed>>
  return new
end
<<add item if needed>>=
{ new[-1] == item | put(new, item) }
@
[[uniqueid]] eliminates both {\TeX} and HTML specials.
<<*>>=      
procedure uniqueid(name)
  local key
  static idtable, keycounts, badchars, badstars
  initial { idtable = table() ; keycounts = table(0) 
            badchars = ~ (&letters ++ &digits ++ '!$()*+,./:;=?@|')
            badstars = repl("*", *badchars)
          }

  if not member(idtable, name) then {
    key = make_key(map(name, badchars, badstars))
    keycounts[key] +:= 1
    idtable[name] = key 
    if keycounts[key] > 1 then idtable[name] ..:= "." .. alphacode(keycounts[key])
  }
  return idtable[name]
end
<<*>>=
procedure make_key(key, len)
    static noslash
    initial noslash = ~ '/'
    key ? return make_key(3(tab(upto('/')), ="/", tab(many(noslash)), pos(0)), *key) |
                 key[1+:3] .. alphacode(\len | *key) |
                 key .. (alphacode(\len) | "")
end
<<*>>=
global wrote_trailers
<<write trailers if not already written>>=
(if /wrote_trailers then {
   wrote_trailers = 1
   write("@nl")
   write("@nl")
   lognowebchunks()
   lognowebindex() 
} else nil)
@
Now, a special hack, so we can write this stuff in the right place on pass 2.
<<*>>=
procedure lognowebchunks(noheader)
  static called
  if \called then return
  else called = 1

  l = alphasort(allchunks)
  write("@xref beginchunks")
  while name = get(l) do {
    write("@xref chunkbegin ", (\anchorlabel[name] | "nw@notdef"), " ", name)
    every write("@xref chunk", !\chunkud[name])
    write("@xref chunkend")
  }
  write("@xref endchunks")
end
<<*>>=
procedure lognowebindex()
  static called
  if \called then return
  else called = 1

  l = alphasort(allidents)
  write("@index beginindex")
  while name = get(l) do {
    write("@index entrybegin ", (\indexanchorlabel[name] | "nw@notdef"), " ", name)
    every write("@index entry", !strip_extra_uses(\indexud[name]))
    write("@index entryend")
  }
  write("@index endindex")
end
<<*>>=
procedure alphasort(x)
  t = table()
  every s = !x do t[s] = sortkey(s)
  t = sort(t, 2)
  l = []
  every put(l, (!t)[1])
  return l
end
<<*>>=
procedure sortkey(s)
  static keep
  initial keep = &lcase ++ ' '
  s = map(s)
  r = ""
  s ? while tab(upto(keep)) do r ..:= move(1)
  return r .. "\n" .. s         # relies on \n sorting lower than other chars
end
@ %def sortkey
<<*>>=
procedure alphacode(n)
  static codes
  initial codes = &digits .. &letters
  return if n < 0 then 
           "-" .. alphacode(-n)
         else if n >= *codes then
           alphacode(n / *codes) .. alphacode(n % *codes)
         else
           codes[n+1]
end
@ 
<<*>>=
procedure fatal(L[])
  write!(["@fatal noidx "] ..| L)
  write!([&errout, "noweb error in noidx: "] ..| L)
  exit(1)
end
<<*>>=
procedure rcsinfo () 
  return "$Id$" ..
         "$Name$"
end
@
\section{List of chunks}
\nowebchunks

\twocolumn
\section{Index}
\nowebindex
@
\end{document}
