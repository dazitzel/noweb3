\section{Configuration files}
<<noweb.cfg>>=
$debug
LIB="|LIBDIR|"
do_nwfile("pipes.cfg")
do_nwfile("sys.cfg")
do_nwfile("util.cfg")
do_nwfile("list.nws")
do_nwfile("set.nws")
do_nwfile("totex.nws")
do_nwfile("tohtml.nws")
do_nwfile("noidx.nws")
do_nwfile("elide.nws")
do_nwfile("unmarkup.nws")
do_nwfile("cat.nws")
do_nwfile("stripconds.nws")
do_nwfile("xchunks.nws")
<<set fallback for connecting pipelines>>
@ 
<<util.cfg>>=
$debug
function libFile(name)
  return MD.extendPath(LIB, name)
end

function errormsg(a, b, c, d, e, f, g, h)
  local i, j, out
  out = writetox(stderr)
  local l = {a, b, c, d, e, f, g, h}
  j = 1; while l[j] do
    case type(l[j]) of 
    | "string", "number" => write(l[j])
    | "table"  => i = 1; while l[j][i] do errormsg(l[j][i]); i = i+1 end
    else => writeto(out); error("non-string non-table to errormsg")
    end
  j = j+1; end
  write("\n")
  writetox(out)
end
<<hackers: entries for Lua functions>>=
errormsg&
Takes up to 8~arguments and writes them to standard error.
Arguments may be strings, numbers, or lists.\\
<<util.cfg>>=
function noweb_error(a, b, c, d, e, f, g, h, i)
  error(List.flatten {a, b, c, d, e, f, g, h, i})
end
<<hackers: entries for Lua functions>>=
noweb\_error&
Halts \texttt{noweb} with an error message consisting of up to
9~arguments.\\ 
@ 
Debug by tracing
<<util.cfg>>=
Config = Config or { } 

Config.readers = { }
Config.nextreader = 1

function Config.reader(r)
  if not Config.readers[r] then 
    Config.readers[r] = Config.nextreader
    Config.nextreader = Config.nextreader + 1
  end
  return Config.readers[r]
end

Config.read = NWB.read
function Config.tread (r) 
  local k, a
  k, a = Config.read(r)
  errormsg("Read key ", image(k), " arg ", image(a), " from reader ", Config.reader(r))
  return k, a
end

Config.put = NWB.put
function Config.tput (r, k, a) 
  errormsg("Put key ", image(k), " arg ", image(a), " into reader ", Config.reader(r))
  return Config.put(r, k, a)
end

function pipetrace(x)
  if x then
    NWB.read = Config.tread
    NWB.put  = Config.tput
  else
    NWB.read = Config.read
    NWB.put  = Config.put
  end
end
<<hackers: entries for Lua functions>>=
pipetrace&
If given a non-null argument, starts tracing every call to
\texttt{NWB.read} and \texttt{NWB.put}.
Useful for debugging pipeline problems.
A null argument turns off tracing.\\
@ 
<<pipes.cfg>>=
$debug
function XPipe.stage(f, arg)
  if type(f) == "function" then
    local n = funname(f) .. '(' .. image(arg) .. ')'
    return XPipe.dostage(f, arg, n)
  else
    return XPipe.dostage(f, arg)
  end
end
XPipe.filter = XPipe.stage
XPipe.source = XPipe.stage
XPipe.sink   = XPipe.stage
@ 
<<sys.cfg>>=
$debug
if not Unix then Unix = { } end

function Unix.stringFilter(s)
  return MPipe.filter("sh", { "-c", s })
end
<<hackers: entries for Lua functions>>=
Unix.stringFilter&
Takes one argument, a Unix shell command, 
and returns a filter to execute that argument.\\
<<sys.cfg>>=
function Unix.extendPath(dir, file) 
  return dir .. "/" .. file
end

function Unix.isExecutable(file)
  return XPipe.run(XPipe.stage("test", {"-x", file})) == 0
end

if not Dos then Dos = { } end

function Dos.extendPath(dir, name)
  return dir .. "\\" .. name
end

case PLATFORM of
| "unix" => MD = Unix
else => error("Unknown target platform ", PLATFORM)
end
@ 
<<util.cfg>>=
$debug
function image(x)
  local i, n, v, pfx, s, ty, tag
  case type(x) of
  | "string" => return format("%q", x)
  | "number" => return format("%.0f", x)
  | "function", "cfunction" =>
       i = funname(x)
       if i then return "<function " .. i .. ">"
       else return tostring(x)
       end
  | "table" =>
        if List.is(x) then <<return image of list [[x]]>>
        else               <<return image of table [[x]]>>
        end
  | "nil" => return 'nil'
  | "userdata" => ty, tag = type(x)
                  case tag of
                  | NWKEY => return funname(x)
                  else => return tostring(x)
                  end
  else => return tostring(x)
  end
end
<<return image of table [[x]]>>=
s = "{"; pfx = " "
i = nil
n = 0
repeat
  i, v = next(x, i)
  if (i ~= nil) then
    s = s .. pfx 
    if type(i) == "string" and strfind(i, "^[a-zA-Z][a-zA-Z_0-9]*$") then
      s = s .. i
    else
      s = s .. "[" .. image(i) .. "]"
    end
    s = s .. " = " .. image(v)
  end
  pfx = ", "
until (i == nil)
return s .. " }"
<<return image of list [[x]]>>=
s = "{"; pfx = " "
i = 1
while x[i] do
  s = s .. pfx .. image(x[i])
  pfx = ", "
  i = i + 1
end
return s .. " }"
@ 
<<hackers: entries for Lua functions>>=
image&
Attempts to convert any Lua value to string form.\\
show&
Writes images of up to 6~arguments on the default Lua output.\\
@
<<util.cfg>>=
function show(x, a, b, c, d, e)
  local i, n, v, pfx
  write(image(x))
  if a then show(a, b, c, d, e) end
end
@ 
We try to find a two-element name for a function.
If that fails we look at top level.
If that fails, we give up.
<<util.cfg>>=
function funname(x)
  local i, v, ii, vv
  -- search global tables for x
  i, v = nextvar(nil)
  while i ~= nil do
    if type(v) == "table" then
      ii, vv = next(v, nil)
      while ii ~= nil do
        if vv == x then
          return i .. "." .. ii
        else
          ii, vv = next(v, ii)
        end
      end
    end
    i, v = nextvar(i)
  end
  -- search globals for x
  i, v = nextvar(nil)
  while i ~= nil do
    if v == x then
      return i
    else
      i, v = nextvar(i)
    end
  end
  return nil
end
<<hackers: entries for Lua functions>>=
funname&
Attempts to return a name by which a Lua value can be known.
Searches top-level variables, then top-level tables.
Typically used to find names of functions.\\
@
<<set fallback for connecting pipelines>>=
function Config.filterfun(x)
  local ty, tag = type(x)
  if ty ~= "userdata" then return nil end
  case tag of
  | MSOURCE, MFILTER, MSINK => return MPipe.connect
  | XPIPE => return XPipe.connect
  else => return nil
  end    
end

function Config.pipeconcatfallback(x, y)
  if     not x then return y
  elseif not y then return x
  end
  local cat = Config.filterfun(x)
  if cat and cat == Config.filterfun(y) then
    return cat(x, y)
  end
  return Config.prevpipeconcatfallback(x, y)
end

Config.prevpipeconcatfallback = setfallback("concat", Config.pipeconcatfallback)
