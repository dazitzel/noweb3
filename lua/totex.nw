% -*- mode: Noweb; noweb-code-mode: icon-mode -*-
\section{Converting {\tt noweb} markup to {\TeX} markup (Icon version)}
The copyright applies both to the {\tt noweb} source and to the
generated shell script.
<<copyright notice>>=
-- Copyright 1991-1998 by Norman Ramsey.  All rights reserved.
-- See file COPYRIGHT for more information.
@
Here's the organization of the source:
<<*>>=
<<copyright notice>>
function rcsinfo () 
  return "$Id$" ..
         "$Name$"
end

function toTeX(args, sourcebuf)
  local delay, name, suppressInitialComment, key, value, a, r
  <<initialization>>
  while length(args) > 0 do 
    a = get(args)
    case a of
    | "-delay" => delay = 1
    | "-noindex" => noindex = 1
    | "-no-gen-comment" => suppressInitialComment = 1
    end
  end
  if not suppressInitialComment then
    realwrite = write; write = firstwrite
  end
  r = B.reader(sourcebuf)
  key, val = r.get()
  while key do
    case key of
    <<cases for conversion>>
    end
  end
  write("\n")
end
@ The markup carefully adds no newlines not already present in the input,
so that the line numbers of the {\TeX} file will be the same as the
numbers of the corresponding {\tt noweb} file.
The variables are:
\begin{description}
\item[\tt code] Nonnull if converting a code chunk.
\item[\tt quoting] Nonnull if quoting code in documentation.
\item[\tt text] Number of characters written since start of
                documentation chunk.
\end{description}
[[text]] is used to write [[\nwdocspar]] if a newline appears at the
beginning of a documentation chunk without any intervening text.
This subtle trick preserves new-paragraph semantics without requiring
the insertion of a blank line that would throw off the line count.
The special control sequences makes a page break at that spot especially likely,
so that small documentation chunks will appear on the some page as the code
chunks they precede.
<<initialization>>=
text = 1
@ %def text

Ordering helps improve speed, so I write things in a funny order.
This whole code is a giant [[if ... then ... else if ...]].
<<cases for conversion>>=
<<@text>>
<<@nl>>
<<code chunks>>
<<@defn>>
<<docs chunks>>
<<@use>>
<<@xref>>
<<@index>>
<<others>>
| NW_FATAL => return 1
else =>
  if type(key) == "string" then
    warn_unknown(key, value)
  else
    lua_error("Internal error in notangle: did not handle key ", key)
  end
<<header botch>>=
lua_error("TeX back end only knows about tex and latex headers, not ", value)
<<trailer botch>>=
lua_error("TeX back end only knows about tex and latex trailers, not ", value)
@
\subsection{Basic text and chunk boundaries}
<<code chunks>>=
| NW_BEGIN_CODE =>  code = 1; writes("\\nwbegincode{", value, "}")
                          <<reset cross-reference info>>
| NW_END_CODE =>    <<dump pending cross-reference info>>
                    code = nil; writes("\\nwendcode{}")
                    lastdefnlabel, pendingprev, pendingnext = nil, nil, nil
<<docs chunks>>=
| NW_BEGIN_DOCS =>  if delay and val == "0" then <<delay for [[@begin docs]]>>  
                    else text = 0; writes("\\nwbegindocs{", value, "}")
                    end
| NW_END_DOCS   =>  if delay and val == "0" then <<delay for [[@end docs]]>> 
                    else writes("\\nwenddocs{}")
                    end
<<@text>>=
| NW_TEXT =>        text = text + strlen(value)
                    if quoting then writes(TeXliteral(value))
                    elseif code then writes(backslash_3(value))
                    else writes(line)
                    end
<<@nl>>=
| NW_NL =>          if not code then <<print [[\nwdocspar]] if no [[text]]>> end
                    if quoting then writes("\\nwnewline") end
                    <<show definitions and uses on definition line---once>>
                    newline()
@
Delaying markup is handled by special patterns for the first document chunk.
Because several {\tt noweb} files can be marked up at once, there can be
several document chunks numbered 0.
The later ones are given no special treatment by the simple expedient of
turning [[delay]] off after the first one.
<<delay for [[@begin docs]]>>=

<<delay for [[@end docs]]>>=
writes("\\nwfilename{", filename, "}"); delay = nil
@
<<print [[\nwdocspar]] if no [[text]]>>=
if text == 0 then writes("\\nwdocspar") end
text = 1
@
\subsection{Chunk definitions and uses, with possible cross-reference}
Here we start to see the cross-reference markup, driven by [[lastxreflabel]]
and [[lastxrefref]].
<<@defn>>=
| NW_DEFN =>       if lastxreflabel then
                     writes("\\sublabel{", lastxreflabel, "}")
                     writes("\\nwmargintag{", label2tag(lastxreflabel), "}")
                   end
                   if lastxrefref then t = "~"..label2tag(lastxrefref) else t = "" end
                   thischunk = value
                   if defns[thischunk] then e = "plusendmoddef"
                   else p = "endmoddef"
                   end
                   writes("\\moddef{", convquotes(value), t, "}\\", e)
                   if useitemstab[thischunk] then useitems = useitemstab[thischunk] end
                   pendinguses = 1
                   lastdefnlabel = lastxreflabel
                   <<clear [[lastxref*]]>>
                   defns[thischunk] = 1
@ [[useitemstab]] enables us to show uses even on later instances of a chunk,
although the index filter only provides uses with the first chunk.
<<initialization>>=
useitemstab = {}
<<@use>>=
| NW_USE =>        if lastxrefref then t = "~"..label2tag(lastxrefref) else t = "" end
                   writes("\\LA{}", convquotes(value), t, "\\RA{}")
                   <<clear [[lastxref*]]>>
<<*>>=
function label2tag(label)
  return "{\\nwtagstyle{}\\subpageref{" .. label .. "}}"
end
@
[[defns]] serves only to give the proper distinction between 
[[\endmoddef]] and [[\plusendmoddef]].
<<initialization>>=
defns = {}
@
\subsection{Quoting, headers, trailers, \& miscellany}
<<others>>=
| NW_QUOTE    => quoting = 1   ; writes("{\\Tt{}")
| NW_ENDQUOTE => quoting = nil ; writes("}")
| NW_FILE     => filename = value; <<clear [[lastxref*]]>>
                 if not delay then writes("\\nwfilename{", filename, "}") end
| NW_LITERAL  => writes(value)
| NW_HEADER   => globmatch value of
                 | "latex *" => <<write {\LaTeX} header>>
                 | "tex *"   => writes("\\input nwmac ")
                 else => <<header botch>>
                 end
| NW_TRAILER  => globmatch value of
                 | "latex *" => write("\\end{document}\n")
                 | "tex *"   => write("\\bye\n")
                 else => <<trailer botch>>
                 end
<<write {\LaTeX} header>>=
writes("\\documentclass{article}\\usepackage{noweb}\\pagestyle{noweb}\\noweboptions{",
       strsub(value, 7), 
       "}\\begin{document}")
@
\subsection{Cross-reference and index support}

\subsubsection{Chunk cross-reference}
We begin with basic cross-reference [[@xref label]] and [[@xref ref]],
then show the chunk cross-reference that comes at the end of a code chunk.
The {\LaTeX} back end ignores [[@xref nextdef]] and [[@xref prevdef]].
<<reset cross-reference info>>=
defitems = { }; useitems = { }
notused = nil
@
By resetting the cross-reference info after dumping,
we make it possible to dump both before index stuff and before
end of chunk, without having to do any checking.
<<dump pending cross-reference info>>=
dumpitems(defitems, "nwalsodefined")
dumpitems(useitems, "nwused")
if notused then writes("\\nwnotused{", notused, "}") end
<<reset cross-reference info>>
<<@xref>>=
| NW_XREF_LABEL     => lastxreflabel = value
| NW_XREF_REF       => lastxrefref   = value
| NW_XREF_BEGINDEFS =>
| NW_XREF_DEFITEM   => put(defitems, value)
| NW_XREF_ENDDEFS   =>
| NW_XREF_BEGINUSES => useitems = {}
| NW_XREF_USEITEM   => put(useitems, value)
| NW_XREF_ENDUSES   => useitemstab[thischunk] = useitems
| NW_XREF_NOTUSED   => notused = value
| NW_XREF_NEXTDEF   => pendingnext = value
| NW_XREF_PREVDEF   => pendingprev = value
<<show definitions and uses on definition line---once>>=
if pendinguses or pendingprev or pendingnext then 
  writes("\\nwstartdeflinemarkup")
  <<write out definition-line markup>>
  writes("\\nwenddeflinemarkup")
  pendinguses, pendingprev, pendingnext = nil, nil, nil
end
<<write out definition-line markup>>=
if pendinguses then
  dumpitems(useitems, "nwusesondefline")
end
if pendingprev or pendingnext then
  if pendingprev then p = pendingprev else p = "\\relax" end
  if pendingnext then n = pendingnext else n = "\\relax" end
  writes("\\nwprevnextdefs{", p, "}{", n, "}")
end
<<clear [[lastxref*]]>>=
lastxreflabel, lastxrefref = nil, nil
<<*>>=
function dumpitems(items, cs)
  local i, n 
  if items and length(items) > 0 then
    i, n = 0, length(items)
    writes("\\", cs, "{")
    while i < n do
      writes("\\\\{", items[i], "}")
      i = i + 1
    end
    writes("}")
  end
end
@
\subsubsection{Identifier cross-reference, i.e.\ index}
This first round of stuff just handles the basics: definitions, uses, and newlines.
Unless it's OK to show the index (by \LA{}SI\RA), we handle nothing but 
\hbox{[[@index nl]]}.
<<@index>>=
| NW_INDEX_NL    =>     if code then write("\\eatline\n") else write("%\n") end
| NW_INDEX_DEFN, NW_INDEX_LOCALDEFN => if not noindex then <<handle index defn>> end
| NW_INDEX_USE                      => if not noindex then <<handle index use>>  end
@
Nothing is involved in handling definitions and uses unless there are cross-reference
labels pending.
An index definition or use has its own [[@xref label]] only if it's in documentation;
if it's in code, we use the anchor label of the definition.
(You don't have to know that to understand what happens here, but I thought you
might like to.)
<<handle index defn>>=
if lastxreflabel then writes("\\nosublabel{", lastxreflabel, "}") end
name = value
if lastxrefref then
  writes("\\nwindexdefn{\\nwixident{", TeXliteral(name), "}}{", indexlabel(name), "}{",
          lastxrefref, "}")
end
<<clear [[lastxref*]]>>
@
The {\LaTeX} back end ignores uses in code; they get bundled up by a previous filter
(the cross-referencer) and handled elsewhere.
<<handle index use>>=
if not code then
  if lastxreflabel then writes("\\protect\\nosublabel{", lastxreflabel, "}") end
  name = value
  if lastxrefref then
    writes("\\protect\\nwindexuse{\\nwixident{", TeXliteral(name), "}}{", 
                indexlabel(name), "}{", lastxrefref, "}")
  end
end
<<clear [[lastxref*]]>>
@
Here's the local identifier cross-reference that appears at the end of a code chunk.
<<@index>>=
| NW_INDEX_BEGINDEFS => if not noindex then <<dump pending cross-reference info>>
                                            writes("\\nwidentdefs{") end
| NW_INDEX_ISUSED    => -- handled by latex
| NW_INDEX_DEFITEM   => if not noindex then i = value; <<write [[i]] with [[\\]]>> end
| NW_INDEX_ENDDEFS   => if not noindex then writes("}")                            end
| NW_INDEX_BEGINUSES => if not noindex then <<dump pending cross-reference info>>
                                            writes("\\nwidentuses{"); ulist = {}   end
| NW_INDEX_ISDEFINED => -- "latex finds the definitions"
| NW_INDEX_USEITEM   => if not noindex then i = value; <<write [[i]] with [[\\]]>> 
                                            put(ulist, i)                          end
| NW_INDEX_ENDUSES   => if not noindex then writes("}"); <<write [[ulist]]>>       end
<<write [[i]] with [[\\]]>>=
writes("\\\\{{\\nwixident{", TeXliteral(i), "}}{", indexlabel(i), "}}") 
<<write [[ulist]]>>=
if lastdefnlabel then
    k = 0
    while k < length(ulist) do
      i = ulist[k]
      writes("\\nwindexuse{\\nwixident{", TeXliteral(i), "}}{", indexlabel(i), "}",
             "{", lastdefnlabel, "}")
      k = k+1
    end
end
@ 
\subsubsection{The list of chunks and the index}
The treatments of the list of chunks and the index are similar.
Both use [[\nwixlogsorted]], which writes magic goo into the {\tt .aux} file.
The real cross-referencing is done by the underlying {\LaTeX} code.
<<@xref>>=
| NW_XREF_BEGINCHUNKS => 
| NW_XREF_CHUNKBEGIN  =>  label, name = split_first_space(value)
                          writes("\\nwixlogsorted{c}{{", convquotes(name), "}",
                                 "{", label, "}{")
| NW_XREF_CHUNKUSE    =>  writes("\\nwixu{", value, "}")
| NW_XREF_CHUNKDEFN   =>  writes("\\nwixd{", value, "}")
| NW_XREF_CHUNKEND    =>  write("}}%\n")
| NW_XREF_ENDCHUNKS   => 
<<@index>>=
| NW_INDEX_BEGININDEX =>
| NW_INDEX_ENTRYBEGIN => if not noindex then
                           label, name = splitFirstSpace(value)
                           write("\\nwixlogsorted{i}{{\\nwixident{", TeXliteral(name),
                           "}}{", indexlabel(name), "}}%\n")
                         end	
| NW_INDEX_ENTRYUSE   =>    -- handled by latex
| NW_INDEX_ENTRYDEFN  =>    -- handled by latex
| NW_INDEX_ENTRYEND   =>
| NW_INDEX_ENDINDEX   =>
@
\subsection{HEader comments}
This godawful hack slips in a comment without messing up our line
numbers.
<<*>>=
function goodnewline()
  write("\n")
end
function firstnewline ()
  write("% ===> this file was generated automatically by noweave --- better not edit it\n")
  newline = goodnewline
end
newline = firstnewline
@
\subsection{Utility procedures}
<<*>>=
function backslash_3(line)
  return gsub(line, "([\\{}])", "\\%1")
end
<<*>>=
TeXspecials = "[\\{}$&#^_ ~%%]"
@
I can't use [[\\char`\%]] and similar sequences with latex2e, because
[[`]] is an active character that suppresses ligatures.  So I got TeX to print out the
actual character codes for me.
This string ([['\\{}$&#^_ ~%']]) should serve as a test.

Unfortunately, the character codes for these characters are not the
same across fonts.  While this is not a problem when everything is in
a typewriter font, it can cause major strangenesses when another font
is used (Icon, for example, is often typeset in a sans-serif font).
Codes for `[[$]]', `[[&]]', `[[#]]', `[[^]]', `[[_]]', `[[~]]' and
`[[%]]' use 
font-independent macros.  Since there is no font-independent way to
typeset `[[\]]', `[[{]]' and `[[}]]',\footnote{Although both plain
\TeX\ and \LaTeX\ provide `[[\{]]' and `[[\}]], plain \TeX\ only
allows their use in math mode.}
we generate special macros defined in \verb"noweb.sty" and
\verb"nwmac.tex".  The default definitions are geared to typewriter
fonts, but they can be redefined as necessary.
<<*>>=
TeXliteral_codes = { }
function init_codes ()
  local c = TeXliteral_codes
  c["\\"] = "nwbackslash"
  c["{"]  = "nwlbrace"
  c["}"]  = "nwrbrace"
  c["$"]  = "$"
  c["&"]  = "&"
  c["#"]  = "#"
  c["^"]  = "char94"
  c["_"]  = "_"
  c["%"]  = "%"
  c["~"]  = "char126"
end
function replace_code(s)
  return TeXliteral_codes[s]
end
function TeXliteral(l) 
  gsub(l, TeXspecials, replace_code)
end
@
A special function is used to implement {\tt noweb}'s quoting 
convention within chunk names.
<<*>>=
function convquotes(s)
  answer = ""
  l, r = strfind(s, "%[%[")
  while l do
    answer = answer .. strsub(s, 1, l) .. "\\code{}"
    s = strsub(s, l+2)
    l, r = strfind(s, "%]%]%]*")
    if l then
      answer = answer .. TeXliteral(substr(s, 1, r-2)) .. "\\edoc{}"
      s = substr(s, r)
    else
      answer = answer .. s .. "\\edoc{}"
      s = ""
    end
    l, r = strfind(s, "%[%[")
  end
  return answer .. s
end
<<initialization>>=
warned = {}
<<*>>=
function warn_unknown(tag, value)
  local v
  if value then v = " " .. value else v = "" end
  if not warned[tag] then
    write(errout, "Warning: unrecognized escape @", tag, v, "\n")
    warned[tag] = 1
  end
end
@
This gets special characters out of the labels used by identifiers.
<<*>>=
function replace_trans(s)
  return ":" .. trans[s]
end
function indexlabel(ident)
  return gsub(ident, transpat, replace_trans)
end
<<*>>=
trans = {}
transpat = "[ #$%%&,:\\^_{}~]"
trans[" "] = "sp"      -- space
trans["#"] = "has"     -- hash
trans["$"] = "do"      -- dollar
trans["%"] = "pe"      -- percent
trans["&"] = "am"      -- ampersand
trans[","] = "com"     -- commad
trans[":"] = "col"     -- colon
trans["\\"] = "bs"      -- backslash
trans["^"] = "hat"     -- hat
trans["_"] = "un"      -- underscore
trans["{"] = "lb"      -- left brace
trans["}"] = "rb"      -- right brace
trans["~"] = "ti"      -- tilde
@ 
<<totex.lua>>=
<<*>>

@ 
